using System;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using FluentAssertions;
using NSubstitute;
using OpenTrackerNext.Core.Entities;
using OpenTrackerNext.Core.Icons.Labels;
using Xunit;

namespace OpenTrackerNext.Core.UnitTests.Icons.Labels;

[ExcludeFromCodeCoverage]
public sealed class CountedIconLabelTests : IDisposable
{
    private readonly CompositeDisposable _disposables = new();
    private readonly IEntity _entity = Substitute.For<IEntity>();

    public void Dispose()
    {
        _disposables.Dispose();
    }

    [Theory]
    [InlineData(nameof(IconLabelPosition.TopLeft))]
    [InlineData(nameof(IconLabelPosition.TopRight))]
    [InlineData(nameof(IconLabelPosition.BottomLeft))]
    [InlineData(nameof(IconLabelPosition.BottomRight))]
    public void Position_ShouldReturnExpected(string positionName)
    {
        var position = IconLabelPosition.FromName(positionName);

        var subject = new CountedIconLabel(_entity, true, true, IndeterminateState.None)
        {
            Position = position
        };
        
        subject.DisposeWith(_disposables);
        
        subject.Position
            .Should()
            .Be(position);
    }

    [Theory]
    [InlineData(
        "0",
        0,
        false,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "1",
        1,
        false,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "2",
        2,
        false,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "3",
        3,
        false,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "4",
        4,
        false,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "?",
        0,
        false,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "1",
        1,
        false,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "2",
        2,
        false,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "3",
        3,
        false,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "4",
        4,
        false,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "0",
        0,
        false,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "1",
        1,
        false,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "2",
        2,
        false,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "3",
        3,
        false,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "?",
        4,
        false,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "0",
        0,
        false,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "1",
        1,
        false,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "2",
        2,
        false,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "3",
        3,
        false,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "4*",
        4,
        false,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "?",
        0,
        false,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "1",
        1,
        false,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "2",
        2,
        false,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "3",
        3,
        false,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "4*",
        4,
        false,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "0",
        0,
        false,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "1",
        1,
        false,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "2",
        2,
        false,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "3*",
        3,
        false,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "?",
        4,
        false,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        null,
        0,
        true,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "1",
        1,
        true,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "2",
        2,
        true,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "3",
        3,
        true,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "4",
        4,
        true,
        false,
        nameof(IndeterminateState.None))]
    [InlineData(
        "?",
        0,
        true,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        null,
        1,
        true,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "2",
        2,
        true,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "3",
        3,
        true,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "4",
        4,
        true,
        false,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        null,
        0,
        true,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "1",
        1,
        true,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "2",
        2,
        true,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "3",
        3,
        true,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "?",
        4,
        true,
        false,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        null,
        0,
        true,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "1",
        1,
        true,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "2",
        2,
        true,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "3",
        3,
        true,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "4*",
        4,
        true,
        true,
        nameof(IndeterminateState.None))]
    [InlineData(
        "?",
        0,
        true,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        null,
        1,
        true,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "2",
        2,
        true,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "3",
        3,
        true,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        "4*",
        4,
        true,
        true,
        nameof(IndeterminateState.Minimum))]
    [InlineData(
        null,
        0,
        true,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "1",
        1,
        true,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "2",
        2,
        true,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "3*",
        3,
        true,
        true,
        nameof(IndeterminateState.Maximum))]
    [InlineData(
        "?",
        4,
        true,
        true,
        nameof(IndeterminateState.Maximum))]
    public void Text_ShouldReturnExpected(
        string? expected,
        int current,
        bool hideLabelAtMinimum,
        bool addAsteriskAtMaximum,
        string indeterminateStateName)
    {
        _entity.Minimum.Returns(0);
        _entity.Maximum.Returns(4);
        _entity.Current.Returns(current);
        
        var indeterminateState = IndeterminateState.FromName(indeterminateStateName);

        var subject = new CountedIconLabel(_entity, hideLabelAtMinimum, addAsteriskAtMaximum, indeterminateState)
        {
            Position = IconLabelPosition.BottomRight
        };
        
        subject.DisposeWith(_disposables);
        
        subject.Text
            .Should()
            .Be(expected);
    }
}